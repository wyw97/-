 Trie图的作用：多模式串的字符串匹配
 
 首先，kmp的模板如下所示：
 特征数
 next[i] = {
 1. -1 ( i = 0)
 2. max{k:0 < k < i && P(0,...,k-1) = P(i-k, ..., i-1)},if k exists
 3. 0 else
 }
 特征向量N 非优化算法
 //p is the pattern string
 //next数组为所求:最长的能够与前缀子串匹配的左子串
 void FindNext()
 {
 		int i, k;
		int m = P.length();
		next[0] = -1;
		i = 0;
		k = -1;
		while(i < m - 1){
			while(k >= 0 && P[k] != P[i]){
				k = next[k];
			}
				i++;
				k++;
				next[i] = k;
			
		}
 }
 
 //优化版本
 void FindNext()
 {
 		int i, k;
		int m = P.length();
		next[0] = -1;
		i = 0;
		k = -1;
		while(i < m - 1){
			while(k >= 0 && P[k] != P[i]){
				k = next[k];
			i++;
			k++;
			if(P[k] == P[i])
				next[i] = next[k];//优化步骤
			else
				next[i] = k;
			
		}
 }
 
 //KMP algorithm
 int KMPStrMatching(string T, string P, int* Next)
 {
 		int i = 0, j = 0;//i是目标的下标变量， j是模式的下标变量;
		int pLen = P.length(), tLen = T.length();//pattern; target
		if(tLen < pLen) return -1;//目标比模式短，肯定失配
		while(j < plen && i < tlen){
				if(j == -1 || T[i] == P[j])
						i++, j++;
				else j = Next[j]
		
		}
		if(j >= pLen) return i - pLen;
		else return -1;
 
 }
 
Trie树（字典树，单词前缀树）
由若干模式串构建而成
struct trienode{
	trienode* child[26];
	trienode(){
		memset(child, 0, sizeof(child));
	}
}
 
void build(string s, trienode* root){
	trienode* p = root;
	int len_s = s.size();
	for(int i = 0; i < len_s; i++){
		if(p->child[s[i]-'a'] == NULL){
			p->child[s[i]-'a'] = new trienode();
		}
		p = p->child[s[i]-'a'];
	}
}

Trie图（AC自动机、DFA)        
对于插入的每个模式串，其插入过程中使用的最后一个节点称为终止节点

关键：记录哪个模式已经被匹配

前缀指针 和kmp中的next数组相类似

注意危险节点
终止节点是危险节点
如果一个节点的前缀指针指向危险节点，则它也是危险节点

多模式串字符串匹配 模板
struct CNode{
	CNode* pChilds[26];
	CNode* pPrev;//前缀指针
	bool bBadNode;//是否是危险节点
	CNode(){
		memset(pChild, 0, sizeof(pChild));
		bBadNode = false;
		pPrev = NULL;
	}
}
CNode Tree[20000];

//将模式串插入trie树,pRoot = Tree + 1,与后面统一;
void Insert(CNode* pRoot, char* s)
{
	for(int i = 0; s[i]; i++){
		if(pRoot->pChilds[s[i]-'a'] == NULL){
			pRoot->pChilds[s[i]-'a'] = Tree + nNodesCount;
			nNodesCount ++;
		}
		pRoot = pRoot->pChilds[s[i]-'a'];
	}
	pRoot->bBadNode = true;
}

//在trie树上加入前缀指针
void BuildDfa()
{
    for(int i = 0; i < 26; i++)
    	Tree[0].pChilds[i] = Tree + 1;
    Tree[0].pPrev = NULL;
    Tree[1].pPrev = Tree;
    deque<CNode* >q;
    q.push_back(Tree + 1);
    
    while(!q.empty()){
    	CNode* pRoot = q.front();
	q.pop_front();
	for(int i = 0; i < 26; i++){
		CNode * p = pRoot->pChild[i];
		if(p){
			CNode* pPrev = pRoot->pPrev;
			while(pPrev->pChilds[i] == NULL)
				pPrev = pPrev->pPrev;
			p->pPrev = pPrev->pChilds[i];
			if(p->pPrev->bBadNode)
				p->bBadNode = true;
			q.push_back(p);
		}
	}
    }
    
}

bool SearchDfa(char* s)
{
	CNode* p = Tree + 1;
	for(int i = 0; s[i]; i++){
		while(p->pChilds[s[i]-'a'] == NULL)
			p = p->pPrev;
		p = p->pChilds[s[i]-'a'];
		if(p->bBadNode)
			return true;
	}
	return false;
	
}


	
 
