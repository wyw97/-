1. 最大流问题

ford-fulkerson算法：

残余网络：网络流图上，找到一条源到汇的路径后，对路径上所有的边，其容量都减去
此次找到的流量，对路径上所有的边，都添加一条反向边，其容量也等于此次找到的流
量，这样得到的新图，就称为原图的“残余网络”。

Edmonds-karp算法：
在每次增广的时候，选择从源到汇的具有最少边数的增广路径,即不是通过dfs寻找增广路径，而是通过bfs寻找增广路径。

Karp算法模版；
const int maxn = 300;//点数
int G[maxn][maxn];//二维图
int Prev[maxn];//前驱节点
bool visited[300];//是否访问过
int n,m;//n 顶点数，m汇点
int Algorithm()
{
  int v,i;
  deque<int> q;
  memset(Prev,0,sizeof(Prev));
  memset(visited,0,sizeof(visited));
  Prev[1] = 0;
  q.push_back(1)
  bool bFindPath = false;
  while(!q.empty()){
    v = q.front();
    q.pop_front();
    for(int i = 1; i <= m; i++){
      if(G[v][i] > 0 && Visited[i] = 0){
          Prev[i] = v;
          Visited[i] = 1;
          if(i == m){
            bFindPath = true;
            q.clear();
            break;
          }
          else q.push_back(i);
      }
    }
    
  }
  if(!bFindPath) return 0;
  int nMinFlow = 99999999;
  v = m;
  while(Prev[v]){
    nMinFlow = min(nMinFlow, G[Prev[v]][v]);
    v = Prev[v];
  }
  v = m;
  while(Prev[v]){
    G[Prev[v]][v] -= nMinFlow;
    G[v][Prev[v]] += nMinFlow;
    v = Prev[v];
  }
  return nMinFlow;
}
int main()
{
  int tot_ans = 0;
  while(aug = Algorithm()){
    tot_ans += aug;
  }
  return 0;
}


Dinic 快速网络流算法
在一次增广过程中，寻找多条增广路径。

bool CountLayer(){//分层
    int layer = 0;
    deque<int> q;
    memset(Layer, 0xff, sizeof(Layer))
    Layer[1] = 0;
    q.push_back(1)
    while(!q.empty()){
      int v = q.front();
      q.pop_front();
      for(int j = 1; j <= M; j++){
         if (G[v][j] > 0 && Layer[j] == -1){
          //not visited yet
            Layer[j] = Layer[v] + 1;
            q.push_back(j);
            if(j == m) return true;  
         }
      }
    }
    return false;
}

int Dinic()
{
    int nMaxFLow = 0;
    deque<int> q;
    while(CountLayer){//可以分层
       q.push_back(1);
       memset(Visited,0,sizeof(Visited));
       Visited[1] = 1;
       while(!q.empty()){
          int nd = q.back();
          if(nd == m){
            // nd 是 汇点
            int nMinC = INFINITE;
            int nMinC_vs;//最小容量边的起点;
            for(int i = 1; i < q.size(); i++){
              int vs = q[i-1];
              int ve = q[i];
              if(G[vs][ve] > 0){
                if(nMinC > G[vs][ve]){
                    nMinC = G[vs][ve];
                    nMinC_vs = vs;
                }
              }
            }
            nMaxFlow += nMinC;
            for(int i = 1; i < q.size(); i++){
              int vs = q[i-1];
              int ve = q[i];
              G[vs][ve] -= nMinc;
              G[ve][vs] += nMinc;//添加反向边;
            }
            while(!q.empty() && q.back() != nMinC_vs){
                Visited[q.back()] = 0;
                q.pop_back();
            }
          }//汇点
          else{
            int i = 1;
            for(i = 1; i <= m; i++){
                if (G[nd][i] > 0 && Layer[i] == Layer[nd] + 1 && !Visited[i]){
                    Visited[i] = 1;
                    q.push_back(i);
                    break;
                }
            }
            if(i > m){//没找到合适的点;
              q.pop_back();
            }
          }//不是汇点
       
       }//栈非空
    }//可以分层
    return nMaxFlow;
}
